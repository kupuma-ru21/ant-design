package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"backend/ent"
	"backend/ent/todo"
	"backend/ent/user"
	"context"
	"errors"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput, userName string) (uuid.UUID, error) {
	u, err := r.client.User.Query().Where(user.UserName(userName)).Only(ctx)
	if err != nil {
		return uuid.UUID{}, errors.New("failed to find user")
	}

	todo, err := r.client.Todo.Create().
		SetOwnerID(u.ID).
		SetTitle(input.Title).
		SetDescription(input.Description).
		Save(ctx)
	if err != nil {
		return uuid.UUID{}, errors.New("failed to create todo")
	}

	return todo.ID, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input ent.UpdateTodoInput, id uuid.UUID) (uuid.UUID, error) {
	update := r.client.Todo.UpdateOneID(id)
	if input.Title != nil {
		update.SetTitle(*input.Title)
	}
	if input.Description != nil {
		update.SetDescription(*input.Description)
	}
	if input.IsDone != nil {
		update.SetIsDone(*input.IsDone)
	}
	todo, err := update.Save(ctx)
	if err != nil {
		return uuid.UUID{}, errors.New("failed to update todo")
	}
	return todo.ID, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	err := r.client.Todo.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return uuid.UUID{}, errors.New("failed to delete todo")
	}
	return id, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, userName string) ([]*ent.Todo, error) {
	return r.client.Todo.Query().
		Where(todo.HasOwnerWith(user.UserName(userName))).
		All(ctx)
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id uuid.UUID) (*ent.Todo, error) {
	return r.client.Todo.Query().Where(todo.ID(id)).Only(ctx)
}
